// ###################################################################### ABSTRACT #########################################################################################

// This code aims to create a clear (cloud and shadow free) annual composite image of an area of interest using a collection of Sentinel 2 images taken during a certain time of year.
// Language: JavaScript
// Environment: Google Earth Engine

// ---------------------------------------------------------------------- INPUTS -------------------------------------------------------------------------------------

// There are several input parameters that can be changed to tailor results. 
// Each key inputer parameter is commented with "// _________ THRESHOLD INPUT" so one can use Ctrl+F with "THRESHOLD INPUT" to sort through all

// Area of Interest (AOI) and Date Parameters
      // - AOI (shapefile with region that one wants to collect images from and create the clear annual composites of):.......................................var AOI (shapefile)
      // - Years (each year corresponds to one run through the for loop to create a composite):...............................................................iterative var year (first line of for loop - range 2018-2023)
      // - Start Date (date that starts the time period for which images are collected from each year):.......................................................var start (second line of for loop- date format)
      // - End Date (date that ends the time period for which images are collected from each year):...........................................................var end (third line of for loop - date format)

// Cloud Masking Parameters
//    - General Filters:
      //     - Cloudy Pixel Percentage (metadata limit to only collect images that have less than this percentage of pixels that are clouds):..................cloudCoverPercentThreshold (range 0-100)
      // - Cloud Masking Thresholds
      //     - Cloud Score:
      //         - Blue Band Thresholds [min, max]:............................................................................................................hard-coded (both range 0 - 1)
      //         - Visible Bands Thresholds [min, max]:........................................................................................................hard-coded (both range 0 - 1)
      //         - NIR and SWIR Band Thresholds [min, max]:....................................................................................................hard-coded (both range 0 - 1)
      //         - Overall Cloud Score (limit to mask anything that has a higher cloud score):.................................................................maxCloudScore (range 0 - 1)
      //         - Buffer Distance (distance in meters to add additional mask that extends off of all pixels in cloud score mask):.............................bufferScoreDistance (meters)
      //     - Cloud Probability:
      //         - Cloud Probability Mask (limit to mask any pixels with a higher probability of being a cloud):...............................................maxCloudProbability (range 0-100)
      //         - Dark Pixel Identification (NIR band limit to identify dark pixels that could be shadow):....................................................nirDrkThresh (around 1500)
      //         - Buffer Distance (distance in meters to add additional mask that extends off of all pixels in cloud probability mask)........................bufferProbDistance (meters)

// ------------------------------------------------------------------ OUTPUTS ------------------------------------------------------------------------------------------------------

// PRIMARY OUTPUT: 
// One Cloud/Cloud-Shadow Free Mosaic consisting of overlaid composities for each year clipped to the AOI......................................................mosaicPROB
//    - Top layer of mosaic (PROBNOSHADOWcomposite): Median composite of S2 images that uses cloud probabily band (S2_CloudProb) to mask clouds and shadow
//    - Second Layer of mosaic (SCOREcompositeWithBuffer): Median composite of S2 images that uses QA60 band and a computed cloud score to mask clouds with a buffer mask around clouds to catch cirrus edges
//    - Third Layer of mosaic (SCOREcompositeNoBuffer): Median composite of S2 images that uses QA60 band and a computed cloud score to mask clouds with no buffer mask
//    - Last Later of mosaic (OGcomposite): Median composite of of S2 images with no masking at all
//
// SECONDARY/OPTIONAL OUTPUTS:
//    - Number of Sentinel 2 images in the collections used for compositing
//    - Visible displays of the individual composites
//    - NDVI displays of composites/mosaic
//    - Exporting capabilities to upload final mosaic to Google Drive as a GeoTiff

// ----------------------------------------------- Sentinel 2 Bands Index (for human reference, not coding) ---------------------------------------------------------------------

// S2_Band      = ['B2'  , 'B3'   , 'B4' , 'B8' , 'B11'  , 'B12'  ]; 
// S2_BandName  = ['blue', 'green', 'red', 'nir', 'swir1', 'swir2'];  // NIR = near-infrared,   SWIR = short-wave infrared

// ################################################## Area of Interest (AOI) #####################################################

// AOI Shapefile loaded into Google Earth Engine Project Assets
var AOI = ee.FeatureCollection('projects/aotealandslides/assets/aotea'); // AOI THRESHOLD INPUT

// Creates a simple red fill over the AOI (useful as a background)
Map.addLayer (AOI, {color: 'red'}, 'aotea');

// Centering the map output on the AOI
Map.centerObject(AOI, 11);

// ######################################################## CLOUD MASKING #######################################################

// --------------------------------------------- simple cloudmasking Sentinel 2 using QA60 Band ----------------------------------

function maskCloudsQA(image) {
  var qa = image.select('QA60');
// Bits 10 and 11 are clouds and cirrus, respectively
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;
// Both flags should be set to zero, indicating clear conditions
  var mask1 = qa.bitwiseAnd(cloudBitMask).eq(0)
              .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
  return image.updateMask(mask1).divide(10000); // S2 scale factor of 1e4 applied (see VISUALIZATION section)
}

//----------------------------- advanced cloudmasking Sentinel 2 using manually calculated Cloud Score  ----------------------

//Function that rescales (between 1 and 0) for cloud score (A helper to apply an expression and linearly rescale the output)) and renames bnads
function rescale(imag, exp, thresholds) { 
  return imag.expression(exp, {
      'blue': imag.select('B2'), // Remnaming the bands to be called in 'calcCloudScore' function
      'green': imag.select('B3'),
      'red': imag.select('B4'),
      'nir': imag.select('B8'),
      'swir1': imag.select('B11'),
      'swir2': imag.select('B12')
    })
    .subtract(thresholds[0])
    .divide(thresholds[1] - thresholds[0]);
}

// Function to manually compute a cloud score (rename occurs via rescale function)
// Does not rely on S2 Cloud Probabilty Band (NOTE: useful for LandSat data in the future which does not have an autmatically derived 'Cloud Probabiliy' band in the GEE catalog)
function calcCloudScore(img) { 
  var score = ee.Image(1.0); 
  // Clouds are reasonably bright in the blue band. 
  score = score.min(rescale(img, 'blue', [0.05, 0.3]));  // BLUE BAND THRESHOLD INPUT
  // Clouds are reasonably bright in all visible bands. 
  score = score.min(rescale(img, 'red + green + blue', [0.1, 0.8])); // VISIBLE BANDS THRESHOLD INPUT
  // Clouds are reasonably bright in all infrared bands. 
  score = score.min(rescale(img, 'nir + swir1 + swir1', [0.15, 0.8]));  // NEAR-INFRARED AND SHORT-WAVE-INFRARED THRESHOLD INPUT
  return score;
}
// The HIGHER the cloud score, the MORE LIKELY the pixel is cloud

// CLOUD SCORE THRESHOLD INPUT
var maxCloudScore = 0.1
// Define the cloud score masking function NO Buffer
function maskCloudScoreNoBuffer(img2, score2) {
  // Create a cloud mask where cloud score is greater than...
  var cloudMask = score2.gt(maxCloudScore);
  return img2.updateMask(cloudMask.not());
}


// BUFFER DISTANCE OFF OF SCORE MASK THRESHOLD INPUT
var bufferScoreDistance = 50; //meters  
// Define the cloud score  masking function WITH buffer
function maskCloudScoreWithBuffer(img1, score1) {
  // Create a cloud mask where cloud score is greater than...
  var cloudMask = score1.gt(maxCloudScore);
  // Use fastDistanceTransform() to compute distance from clouds in meters
  var distanceFromClouds = cloudMask.fastDistanceTransform(30);  // 30 meters distance, adjust as needed
  // Create a buffer mask where distance is less than or equal to the desired buffer size
  var bufferMask = distanceFromClouds.lte(bufferScoreDistance);
  // Combine the cloud mask and buffer mask to mask both clouds and surrounding pixels
  var combinedMask = cloudMask.or(bufferMask);
  // Apply the combined mask to the image
  return img1.updateMask(combinedMask.not());  // Invert the mask (cloud + buffer masked)
}

//----------------------------- advanced cloudmasking Sentinel 2 using Cloud Probability (utilizing GEE's S2_CloudProb band) ------------------------------------------

// Note: Since the additional CLOUDY_PIXEL_PERCENTAGE filter, is not usable metadata in GEE's S2 Cloud Probablity band (S2_CloudProb), the two collections, S2_Harmonized and S2_CloudProb, must be manually aligned.

// This 'matching' is done by filtering through the times that the S2_Harmonized images are taken to match them each with the time that the corresponding derived 'Cloud Probability' image was produced.
// There is a small difference in time between when these two events (when the S2_Harmonized and the S2_CloudProb images are produced) occur.

// Hence, the getCloudProbImage function below adds a buffer of an hour before and after the harmonized images were produced to match to then filter the coud probability images
// Function will be mapped to S2_Harmonized collection to create corresponding S2_CloudProb collection
function getCloudProbImage(image) {
  var imageTime = ee.Date(image.get('system:time_start'));
  // Hour buffer to find close match for 'time_start' of S2_Harmonized and S2_CloudProb
  var startTime = imageTime.advance(-1, 'hour');
  var endTime = imageTime.advance(1, 'hour');
  var cloudProbImage = S2cloudProbFullCollection
                        .filterDate(startTime, endTime)
                        .first(); 
  return cloudProbImage; 
}

// CLOUD PROBABILITY MASK THRESHOLD INPUT
var maxCloudProbability = 20; // limit for % probability that pixel is a cloud
// Function to apply the cloud probability mask to each S2 image (no shadow masking)
function applyCloudProbMask(image) {
  var cloudProbImage = getCloudProbImage(image);  // Get corresponding cloud probability image
  // Create a cloud probability mask (where cloud probability is less than 20%)
  var probMask = ee.Image(cloudProbImage).lt(maxCloudProbability);
  // Apply the cloud probability mask to the Sentinel-2 image
  var maskedImage = image.updateMask(probMask).divide(10000);  // Normalize the image
  return maskedImage;
}

// Function to match and add cloud probability band to S2_Harmonized collection to mask in the future
function addCloudBandsToImgCollection(image) {
    var cloudProbThreshold = maxCloudProbability;
    var cloudProbImage = getCloudProbImage(image);  // Get corresponding cloud probability image
    // Create a cloud probability mask (where cloud probability is greater than than 20%)
    var isCloud = ee.Image(cloudProbImage).gt(cloudProbThreshold).rename('clouds'); 
    return image.addBands(ee.Image([isCloud]));
}

// Defining threshold for considering a pixel 'dark' using Near Infrared Band (NIR - Band 8)
var nirDrkThresh = 1500 // DARK PIXELS THRESHOLD INPUT
// Function to identify cloud shadows (and add to the collection as a band) by creating cloud shadow projections 
function addShadowBandsToImgCollection(image) {
  var darkPixels = ee.Image(image).select('B8').lt(nirDrkThresh).rename('dark_pixels');
        
  var shadowAzimuth = ee.Number(90).subtract(ee.Number(ee.Image(image).get('MEAN_SOLAR_AZIMUTH_ANGLE'))); 
  var cldProj = ee.Image(image).select('clouds')   // projetion using MEAN_SOLAR_AZIMUTH_ANGLE off of identified clouds (high cloud probability)
            .directionalDistanceTransform(shadowAzimuth, 10)
            .reproject({crs: ee.Image(image).select(0).projection(), scale: 100})
            .select('distance')
            .mask()
            .rename('cloud_transform');
        
  var shadows = cldProj.multiply(darkPixels).rename('shadows');  //Mapping the cloud projection overlap with dark pixel location to identify cloud shadow pixels and add band: 'shadows'
        
  return ee.Image(image).addBands(ee.Image([darkPixels, cldProj, shadows]));
}

// CLOUD PROBABILITY BUFFER MASK DISTANCE THRESHOLD INPUT
  var bufferProbDistance = 100; 
// Function to add both cloud AND cloud shadow masks into a single band: 'cloudmask'
function addCldShdwMaskToImgCollection(img) {
  var imgCloud = addCloudBandsToImgCollection(img);
  var imgCloudShadow = addShadowBandsToImgCollection(imgCloud);

  var isCldShdw = imgCloudShadow.select('clouds').add(imgCloudShadow.select('shadows')).gt(0);
  isCldShdw = isCldShdw.focalMin(2).focalMax(bufferProbDistance * 2 / 20)
    .reproject({crs: img.select(0).projection(), scale: 20})
    .rename('cloudmask');

  return imgCloudShadow.addBands(isCldShdw);
}

// Function to mask clouds AND cloud shadow using 'cloudmask' band added from 'addCldShdwMaskToImgCollection' function
function maskCloudShdw (image) {
    var notCldShdw = image.select('cloudmask').not();
    return image.updateMask(notCldShdw).divide(10000);
}

// Function to remove the last 5 bands from an image (can be mapped to image collection)
// After adding and utilizing 5 calculated bands [isCloud, darkPixels, cldProj, shadows, cloudmask] in the functions shown above, remove them to avoid output/mapping errors
function removeLast5Bands(image) {
  // Get the list of all band names in the image
  var bandNames = image.bandNames();
  // Select all bands except the last 5
  var selectedBands = bandNames.slice(0, bandNames.length().subtract(5));
  return image.select(selectedBands);
}

//################################################# HIGH ABSTRACT PROCESSING ##################################################################
// (applying cloud masking functions from section above to later map to S2 image collections)

// Cloud Score and QA mask WITH buffer off of clouds
function processCloudSoreWithBuffer(img) {
    var QAmask = maskCloudsQA(img.clip(AOI));
    var cloudScorePostMask = maskCloudScoreWithBuffer(QAmask, calcCloudScore(QAmask))
    return cloudScorePostMask;
}

// Cloud Score and QA mask WITHOUT buffer off of clouds
function processCloudSoreNoBuffer(img) {
    var QAmask = maskCloudsQA(img.clip(AOI));
    var cloudScorePostMask = maskCloudScoreNoBuffer(QAmask, calcCloudScore(QAmask))
    return cloudScorePostMask;
}

// Cloud Probability mask with buffer and Cloud Shadow Mask using projection
// Function to match and add cloud probability band to S2_Harmonized collection to mask in the future
function processCloudProbWithBufferNoShadow(S2Image) {
  var S2ImageNoCloud = addCldShdwMaskToImgCollection(S2Image)
  var S2ImageNoCloudNoShadow = maskCloudShdw (S2ImageNoCloud)
  var S2ImageNoCloudNoShadowNoExtraBands = removeLast5Bands(S2ImageNoCloudNoShadow)
  return S2ImageNoCloudNoShadowNoExtraBands
}

// ################################################# VISUALIZATION #####################################################################

//-----------------  Visible RGB (AFTER scale factor of 1e4 applied -- i.e. .divide(10000) was applied during masking) ------------------
var S2_vis = {
  min: 0.0,
  max: 0.3,
  bands: ['B4', 'B3', 'B2']
}
//-----------------  Visible RGB (BEFORE scale factor of 1e4 applied - i.e. original unmasked images) -----------------------------------
var S2_visPreMask = {
  min: 0.0,
  max: 0.3*10000,
  bands: ['B4', 'B3', 'B2']
}
//----------------  Visible RGB Percentile (currently unused, but allows composite visualization using a percentile that is not 50%/median) 
// Ex: 75th percentile
var S2_visPercentile = {
  min: 0.0,
  max: 0.3,
  bands: ['B4_p75', 'B3_p75', 'B2_p75']
}
// -------------------------------------------- NDVI Visualization  -----------------------------------------------------------------------------
// Visualizes dense vegetation as dark green with a gradient to white non-vegetation (exposed soild/roads/buildings/sand/rock/etc.)
var S2_ndvi = {
  min:0, 
  max:1, 
  palette: ['white', 'green']}; 
//--------------------------------------------- Cloud Probability Visualization -------------------------------------------------------------
// Visualizes the S2_CLOUD_PROBABILITY band (useful for mask quality assesment and debugging)
// Clouds appear as white with a gradient to blue non-cloudy areas
var S2_cloud = {
  min: 0.0,
  max: 100,
  palette: ['blue', 'white']
}
// ###################################################### FILTERING IMAGE COLLECTIONS #####################################################

// Defining cloudy pixel percentage threshold to filter
var cloudCoverPercentThreshold = 80; // CLOUDY PIXEL PERCENTAGE THRESHOLD INPUT

// ------------------------------------------------------  START OF ANNUAL 'FOR LOOP'  -------------------------------------------------------

// Filtering to only include AOI for certain dates with certain amount of cloud coverage %
for (var year = 2019; year <= 2023; year++) {  // ANNUAL LOOP THRESHOLD INPUT
  var start = year + '-10-01';  // START DATE THRESHOLD INPUT
  var end = (year + 1) + '-01-31';  // END DATE THRESHOLD INPUT

  var S2 = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
                .filterDate(start, end)
                .filterBounds(AOI)
                .filterMetadata('CLOUDY_PIXEL_PERCENTAGE', 'less_than', cloudCoverPercentThreshold);
                
var S2_times = S2.aggregate_array('system:time_start');


// Over selecting cloud probability images initially (no % filter)
var S2cloudProbFullCollection = ee.ImageCollection('COPERNICUS/S2_CLOUD_PROBABILITY')
                .filterDate(start, end)
                .filterBounds(AOI);
              
var cloudProb_times = S2cloudProbFullCollection.aggregate_array('system:time_start');  

// ############################################################# OUTPUTS ####################################################################

// -------------------------------------------------------- Collection Size Checks --------------------------------------------------------

// Print the number of clearish images from end of each year taken
var count1 = S2.size();
print('# of images in AOI w/ less than ' + cloudCoverPercentThreshold + '% cloud from end of ' + year + ':', count1);

// Checking when Images were taken and Ensuring Correction Matching between S2_Harmonized and S2_cloudProb 
// print(S2_times)
// print(cloudProb_times)
// var count2 = S2cloudProbFullCollection.size();
// print('Total cloud prob images from end of ' + year + ':', count2);
// var count3  = S2.map(processCloudProbWithBufferNoShadow).size();
// print('# of cloud prob masked images from end of ' + year + ' (Should match):', count3);

// ------------------------------------------------------------- Map Layers ------------------------------------------------------------------

// Original Composite without Cloud Masking (only filters for date -- Oct 1st through Jan. 31st -- and cloudy pixel %)
var OGcomposite = S2.map(maskCloudsQA).median().clip(AOI)
// Map.addLayer(OGcomposite, S2_vis, 'S2 Composite-NoMask ' + year);

// // No Buffer Composite With Double Cloud Masking (both QA and Score cloud filters to all images in the collection)
// Used to fill in the top area of island where probability data is not availiable
var SCOREcompositeNoBuffer = S2.map(processCloudSoreNoBuffer).median();
// Map.addLayer(SCOREcompositeNoBuffer, S2_vis, 'S2 Composite-ScoreMaskNoBuffer ' + year);

// // Composite WITH Cloud Probablity Masking (No Cloud Shadow Masking)
// var PROBcomposite = S2probMasked.median().clip(AOI);

// // Composite WITH Double Cloud Masking (both QA band and calculated 'cloudScore' cloud filters to all images in the collection) AND cloud buffer mask
var SCOREcompositeWithBuffer = S2.map(processCloudSoreWithBuffer).median();
// Map.addLayer(SCOREcompositeWithBuffer, S2_vis, 'S2 Composite-ScoreMaskWITHBuffer ' + year);

// // Composite WITH Cloud Probability Masking AND Cloud Shadow Masking (using sun azimuth angle and cloud probability band)
var S2noShadow = S2.map(processCloudProbWithBufferNoShadow);
var PROBNOSHADOWcomposite = S2noShadow.median().clip(AOI)
// returns img.addBands(is_cld_shdw)
// Map.addLayer(PROBNOSHADOWcomposite, S2_vis, "Shadow and Cloud Prob Mask "+year);

// Highest Quality Mask is overlayed (Cloud and Cloud Shadow Masking based on Prability with Buffer) with less quality layers underneath to fill data gaps
// // Mosaic with PROBNOSHADOWcomposite on top, then SCOREcompositeWithBuffer, then SCOREcompositeNoBuffer, down to OGcomposite on bottom
var mosaicPROB = ee.ImageCollection([OGcomposite, SCOREcompositeNoBuffer, SCOREcompositeWithBuffer, PROBNOSHADOWcomposite]).mosaic();
Map.addLayer(mosaicPROB, S2_vis, 'Mosaic with PROB Composite on Top' + year);

// --------------------------------------------------------------- NDVI DISPLAY ---------------------------------------------------------------------
// Normalized Difference Vegetation Index
// Band Index: 'NIR' (B8) and 'RED' (B4) 
// var ndvi = mosaicPROB.normalizedDifference(['B8', 'B4']).rename(['ndvi']); 
// Map.addLayer(ndvi.clip(AOI), S2_ndvi, 'Mosaic NDVI ' + year);


// ############################################################ EXPORT TO GeoTiff ###################################################### 
// Export.image.toDrive({
//   image: mosaicPROB,
//   description: 'S2_MosaicofComposites_' + (year),  // Name of the file
//   scale: 10,  // Set the scale (resolution) in meters (10m for Sentinel-2)
//   region: AOI,  // Specify the region to export
//   maxPixels: 1e13,  // Increase max pixel count if needed
//   fileFormat: 'GeoTIFF'
// });
}

// ------------------------------------------------------  END OF ANNUAL 'FOR LOOP'  -------------------------------------------------------
